import Config

# Configure sitemap host for development
config :sitemap,
  host: "http://localhost:4000"

# Configure your database
config :onestack, Onestack.Repo,
  database: Path.expand("../onestack_dev.db", Path.dirname(__ENV__.file)),
  pool_size: 15,
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  queue_target: 1000,
  queue_interval: 5000

# config :onestack, Onestack.Repo,
# username: "onestack-cal",
# password: "kQfta9HMg7pKUW88m5X9o9eSGUdA0y0JQji2cPXYGtRiIq9rTDFzSDiq3FkAaHTR",
# hostname: "postgres_db",
# database: "onestack_dev",
# port: 5433,
# pool_size: 10,
# stacktrace: true,
# show_sensitive_data_on_connection_error: true

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :onestack, OnestackWeb.Endpoint,
  url: [host: ".localhost", port: 4000],
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [
    ip: {127, 0, 0, 1},
    port: 4000
  ],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "qGLdDwV/27a9wW5OKVfvCyJFBIPXEQf2howiOpBzvXyJRFd2Lu+Oti0R9R/WFps1",
  session: [domain: ".localhost", key: "_onestack_key", signing_salt: "onestack_dev_salt"],
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:onestack, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:onestack, ~w(--watch)]}
  ],
  live_reload: [
    notify: [
      live_view: [
        ~r"lib/onestack_web/core_components.ex$",
        ~r"lib/onestack_web/(live|components)/.*(ex|heex)$"
      ]
    ],
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"lib/onestack_web/controllers/.*(ex|heex)$",
      ~r"lib/onestack_web/live/.*(ex|heex)$",
      ~r"priv/gettext/.*(po)$"
    ]
  ]

config :stripity_stripe,
  api_key: System.get_env("STRIPE_API_KEY"),
  stripe_webhook_secret: System.get_env("STRIPE_WEBHOOK_SECRET"),
  public_key: System.get_env("STRIPE_PUBLIC_KEY")

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
# config :onestack, OnestackWeb.Endpoint,
#   live_reload: [
#     patterns: [
#       ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
#       ~r"priv/gettext/.*(po)$",
#       ~r"lib/onestack_web/(controllers|live|components)/.*(ex|heex)$"
#     ]
#   ]

# Enable dev routes for dashboard and mailbox
config :onestack, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Include HEEx debug annotations as HTML comments in rendered markup
config :phoenix_live_view, :debug_heex_annotations, true

# Disable swoosh api client as it is only required for production adapters.
# config :swoosh, :api_client, false

config :onestack,
  products: [
    %{
      name: "formbricks",
      db_config: [
        hostname: System.get_env("POSTGRES_HOST", "postgres_db"),
        port: String.to_integer(System.get_env("POSTGRES_PORT", "5432")),
        username: System.get_env("POSTGRES_USER"),
        password: System.get_env("POSTGRES_PASSWORD"),
        database: "formbricks"
      ]
    },
    %{
      name: "cal",
      db_config: [
        hostname: System.get_env("POSTGRES_HOST", "postgres_db"),
        port: String.to_integer(System.get_env("POSTGRES_PORT", "5432")),
        username: System.get_env("POSTGRES_USER"),
        password: System.get_env("POSTGRES_PASSWORD"),
        database: "onestack-cal"
      ]
    },
    %{
      name: "castopod",
      db_config: [
        hostname: System.get_env("MARIADB_HOST", "mariadb"),
        port: String.to_integer(System.get_env("MARIADB_PORT", "3306")),
        username: System.get_env("MARIADB_USER", "root"),
        password: System.get_env("MARIADB_PASSWORD"),
        database: "castopod"
      ]
    },
    %{
      name: "n8n",
      db_config: [
        hostname: System.get_env("POSTGRES_HOST", "postgres_db"),
        port: String.to_integer(System.get_env("POSTGRES_PORT", "5432")),
        username: System.get_env("POSTGRES_USER"),
        password: System.get_env("POSTGRES_PASSWORD"),
        database: "n8n"
      ]
    },
    %{
      name: "documenso",
      db_config: [
        hostname: System.get_env("POSTGRES_HOST", "postgres_db"),
        port: String.to_integer(System.get_env("POSTGRES_PORT", "5432")),
        username: System.get_env("POSTGRES_USER"),
        password: System.get_env("POSTGRES_PASSWORD"),
        database: "documenso"
      ]
    },
    %{
      name: "nocodb",
      db_config: [
        hostname: System.get_env("POSTGRES_HOST", "postgres_db"),
        port: String.to_integer(System.get_env("POSTGRES_PORT", "5432")),
        username: System.get_env("POSTGRES_USER"),
        password: System.get_env("POSTGRES_PASSWORD"),
        database: "nocodb"
      ]
    },
    %{
      name: "chatwoot",
      db_config: [
        hostname: System.get_env("POSTGRES_HOST", "postgres_db"),
        port: String.to_integer(System.get_env("POSTGRES_PORT", "5432")),
        username: System.get_env("POSTGRES_USER"),
        password: System.get_env("POSTGRES_PASSWORD"),
        database: "chatwoot"
      ]
    },
    %{
      name: "penpot",
      db_config: [
        hostname: System.get_env("POSTGRES_HOST", "postgres_db"),
        port: String.to_integer(System.get_env("POSTGRES_PORT", "5432")),
        username: System.get_env("POSTGRES_USER"),
        password: System.get_env("POSTGRES_PASSWORD"),
        database: "penpot"
      ]
    },
    %{
      name: "plane",
      db_config: [
        hostname: System.get_env("POSTGRES_HOST", "postgres_db"),
        port: String.to_integer(System.get_env("POSTGRES_PORT", "5432")),
        username: System.get_env("POSTGRES_USER"),
        password: System.get_env("POSTGRES_PASSWORD"),
        database: "plane"
      ]
    },
    %{
      name: "kimai",
      db_config: [
        hostname: System.get_env("MARIADB_HOST", "mariadb"),
        port: String.to_integer(System.get_env("MARIADB_PORT", "3306")),
        username: System.get_env("MARIADB_USER", "root"),
        password: System.get_env("MARIADB_PASSWORD"),
        database: "kimai"
      ]
    },
    %{
      name: "twenty",
      db_config: [
        hostname: System.get_env("TWENTY_DB_HOST", "twenty_db"),
        port: String.to_integer(System.get_env("TWENTY_DB_PORT", "5432")),
        username: System.get_env("TWENTY_DB_USER", "postgres"),
        password: System.get_env("TWENTY_DB_PASSWORD"),
        database: "default"
      ]
    }
  ]
