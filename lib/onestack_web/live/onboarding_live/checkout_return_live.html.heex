<section class="py-8 lg:py-16 min-h-screen" id="subscription-success">
  <div class="max-w-screen-xl mx-auto px-4 lg:px-12">
    <h1 class="text-3xl font-extrabold mb-6 text-gray-900 dark:text-white">
      Welcome to your new stack!
    </h1>
    <!-- Success Alert -->
    <div
      class="p-4 mb-6 text-sm text-green-800 rounded-lg bg-green-50 dark:bg-gray-800 dark:text-green-400"
      role="alert"
    >
      <div class="flex items-center">
        <svg
          class="flex-shrink-0 w-5 h-5 mr-3"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
        </svg>
        <div>
          <span class="font-medium">
            Woohoo! ðŸŽ‰ Your stack is being prepared as we speak.
          </span>
          <p class="mt-2">
            Your login details for each product on your stack are the same as your Onestack credentials.
          </p>
        </div>
      </div>
    </div>
    <!-- Success Confirmation Section with Premium Spacing -->
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <!-- Main Content Container with Side-by-Side Layout -->
      <div class="flex flex-col lg:flex-row gap-8 items-stretch">
        <!-- Order Summary Card - Left Side -->
        <div class="lg:w-1/2 w-full bg-white border border-gray-200 rounded-2xl shadow-lg overflow-hidden dark:bg-gray-800 dark:border-gray-700 transition-all duration-300 hover:shadow-xl flex flex-col">
          <div class="p-8 flex-grow">
            <h2 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white flex items-center">
              <span class="mr-3">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-7 w-7 text-blue-500"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
              </span>
              Order Summary
            </h2>

            <div class="relative overflow-hidden rounded-xl">
              <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-300">
                  <tr>
                    <th scope="col" class="px-6 py-4 font-semibold">
                      Details
                    </th>
                    <th scope="col" class="px-6 py-4 font-semibold">
                      Amount
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <%= for item <- @checkout_session.line_items.data do %>
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                      <td class="px-6 py-5">
                        <%= item.description %>
                      </td>
                      <td class="px-6 py-5 font-medium">
                        <%= Money.to_string(
                          Money.new(item.amount_total)
                        ) %>
                      </td>
                    </tr>
                  <% end %>
                  <tr class="font-bold bg-blue-50 dark:bg-gray-700">
                    <td
                      class="px-6 py-5 text-right text-gray-900 dark:text-white text-base"
                      colspan="1"
                    >
                      Total Amount
                    </td>
                    <td class="px-6 py-5 text-gray-900 dark:text-white text-base">
                      <%= Money.to_string(
                        Money.new(@checkout_session.amount_total)
                      ) %>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
        <!-- Selected Products Cards - Right Side -->
        <div class="lg:w-1/2 w-full bg-white border border-gray-200 rounded-2xl shadow-lg overflow-hidden dark:bg-gray-800 dark:border-gray-700 transition-all duration-300 hover:shadow-xl flex flex-col">
          <div class="p-8 flex-grow">
            <h2 class="text-2xl font-bold mb-8 text-gray-900 dark:text-white flex items-center">
              <span class="mr-3">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-7 w-7 text-blue-500"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                  />
                </svg>
              </span>
              Your stack
            </h2>

            <div class="relative w-full">
              <!-- Grid layout for icons -->
              <div class="flex flex-wrap gap-4 justify-center py-4">
                <%= for {product_name, index} <- Enum.with_index(@selected_products) do %>
                  <% product_metadata =
                    Onestack.CatalogMonthly.ProductMetadata.get_metadata(
                      product_name
                      |> String.capitalize()
                    ) %>
                  <div
                    class="product-icon flex-shrink-0 group relative"
                    style={"animation-delay: #{index * 0.1}s"}
                  >
                    <!-- Icon with hover effect -->
                    <div class="bg-blue-500 p-1 rounded-full shadow-md transition-all duration-300 group-hover:shadow-lg relative">
                      <div class="bg-white dark:bg-gray-800 p-3 rounded-full flex items-center justify-center">
                        <Lucide.render
                          icon={product_metadata.icon}
                          class="w-6 h-6 text-blue-500"
                        />
                      </div>
                      <!-- Tooltip that appears on hover -->
                      <div class="absolute opacity-0 group-hover:opacity-100 bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1 bg-gray-900 text-white text-xs rounded-lg pointer-events-none transition-opacity duration-300 whitespace-nowrap">
                        <%= product_metadata.display_name %>
                        <svg
                          class="absolute text-gray-900 h-2 w-full left-0 top-full"
                          x="0px"
                          y="0px"
                          viewBox="0 0 255 255"
                        >
                          <polygon
                            class="fill-current"
                            points="0,0 127.5,127.5 255,0"
                          />
                        </svg>
                      </div>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
            <!-- Add this style to hide scrollbar but maintain functionality -->
            <style>
              .hide-scrollbar {
                -ms-overflow-style: none; /* IE and Edge */
                scrollbar-width: none; /* Firefox */
              }
              .hide-scrollbar::-webkit-scrollbar {
                display: none; /* Chrome, Safari and Opera */
              }

              .product-icon {
                animation: fadeIn 0.5s ease-out forwards;
                opacity: 0;
              }

              @keyframes fadeIn {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
              }
            </style>
            <!-- Access Instructions -->
            <div class="mt-8 p-5 bg-purple-50 dark:bg-gray-700 rounded-xl">
              <p class="text-gray-700 dark:text-gray-200">
                Visit your dashboard to start using your stack.
              </p>
            </div>
          </div>
        </div>
      </div>
      <!-- Next Steps Button -->
      <div class="mt-12 text-center">
        <a
          href={OnestackWeb.URLHelper.subdomain_url("app")}
          class="inline-flex items-center px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-medium rounded-xl shadow-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105"
        >
          <span>Go to Dashboard</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 ml-2"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
              clip-rule="evenodd"
            />
          </svg>
        </a>
      </div>
    </div>
  </div>
</section>
<!-- Confetti Animation Script -->
<script
  src="https://cdn.jsdelivr.net/npm/@tsparticles/confetti@3.0.3/tsparticles.confetti.bundle.min.js"
>
</script>
<!-- Add card animation styles -->
<style>
  .product-card {
    opacity: 0;
    animation: fadeInUp 0.6s ease forwards;
    perspective: 1000px;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translate3d(0, 30px, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }

  .product-card:hover {
    box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.1), 0 10px 10px -5px rgba(59, 130, 246, 0.04);
  }
</style>

<script>
  const duration = 2 * 1000,
    animationEnd = Date.now() + duration,
    defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

  function randomInRange(min, max) {
    return Math.random() * (max - min) + min;
  }

  // Start the confetti immediately
  const interval = setInterval(function() {
    const timeLeft = animationEnd - Date.now();

    if (timeLeft <= 0) {
      return clearInterval(interval);
    }

    const particleCount = 50 * (timeLeft / duration);

    confetti(
      Object.assign({}, defaults, {
        particleCount,
        origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
      })
    );
    confetti(
      Object.assign({}, defaults, {
        particleCount,
        origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
      })
    );
  }, 250);
</script>
